# -*- coding: utf-8 -*-
"""ATSpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EvwSYUoARevIpR7xJngko9g8Si1CMNda

# Previsão de séries temporais com *ATSPY*

A *ATSpy* é uma biblioteca de *auto time series*, isto é, tem a capacidade de treinar vários modelo de séries temporais.

O objetivo é desenvolver facilmente modelos de série temporal de última geração para prever séries de dados univariadas. Basta carregar seus dados e selecionar quais modelos deseja testar. Este é o maior repositório de modelos de séries temporais estruturais e de aprendizado de máquina automatizados.

Os modelos dessa biblioteca são:

1) ```ARIMA``` - Modelagem ARIMA Automatizada;

2) ```Prophet``` - Modelando Sazonalidade Múltipla com Crescimento Linear ou Não Linear;

3) ```HWAAS``` - Suavização exponencial com tendência aditiva e sazonalidade aditiva;

4) ```HWAMS``` - Suavização exponencial com tendência aditiva e sazonalidade multiplicativa;

5) ```NBEATS``` - Análise de expansão da base neural (agora fixada em 20 épocas);

6) ```Gluonts``` - modelo baseado em RNN (agora fixado em 20 épocas);

7) ```TATS``` - Sazonal e tendência no Box Cox;

8) ```TBAT``` - Trend e Box Cox;

9) ```TBATS1``` - Tendência, Sazonal (um) e Box Cox;

10) ```TBATP1``` - TBATS1, mas a inferência sazonal é codificada por periodicidade

11) ```TBATS2``` - TBATS1 com dois períodos sazonais

## Instalação da biblioteca
"""

pip install atspy

"""## Importação das bibliotecas e módulos"""

import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt

from atspy import AutomatedModel

from sklearn.metrics import explained_variance_score, mean_absolute_error, mean_squared_error
from sklearn.metrics import mean_squared_log_error, median_absolute_error, r2_score

"""## Importação dos dados"""

df=pd.read_csv('MRTSSM4453USN.csv')
df.DATE = pd.to_datetime(df.DATE)
df = df.set_index("DATE")
df.head()

"""últimas linhas da série temporal."""

df.tail()

"""Dimensão da base de dados."""

df.shape

"""Não há valores faltantes."""

df.isna().sum()

"""Tipo dos dados."""

df.dtypes

"""Tabela estatística da base de dados."""

df.describe()

"""Gráfico da série temporal."""

df.plot(figsize=(20,3));

"""## Modelagem"""

#criando uma lista com os modelos
model_list = ["ARIMA", "HWAMS","HWAAS","TBAT", "TATS","TBATS1", "TBATP1", "TBATS1", "TBATS2"]

#Para treino dos modelos será usada uma base de dados sem as últimas 50 observações
am = AutomatedModel(df=df[:-50], model_list=model_list, forecast_len=50)

"""### Análise dentro da amostra

A primeira etapa da modelagem é encontrar o(s) modelo(s) que melhor modelem a base de treino. Abaixo, o código irá gerar as previsões para toda série de treino com todos os modelos e o desempenho de cada um desses valores por meio das métricas de avaliação *rmse* e *mse*.

"""

previsoes, desempenho = am.forecast_insample()
previsoes

"""Métricas de avaliação para cada modelo: o melhor modelo foi o ARIMA, seguido do TBATS1."""

desempenho

"""### Gráficos das séries (original e dos modelos)

Original e ARIMA.
"""

previsoes['Target'].plot(figsize=(20,3))
previsoes['ARIMA'].plot()
plt.legend();

"""Original e HWAMS."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['HWAMS'].plot()
plt.legend();

"""Original e HWAAS."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['HWAAS'].plot()
plt.legend();

"""Original e TBAT."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['TBAT'].plot()
plt.legend();

"""Original e TATS."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['TATS'].plot()
plt.legend();

"""Original e TBATS1."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['TBATS1'].plot()
plt.legend();

"""Original e TBATP1."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['TBATP1'].plot()
plt.legend();

"""Original e TBATS2."""

previsoes['Target'].plot(figsize=(20,3))
previsoes['TBATS2'].plot()
plt.legend();

"""### Análise fora da amostra

Agora é necessário avaliar o desempenho dos modelos em gerar previsões para os períodos de tempo fora dos dados de treinamento.
"""

previsoes2 = am.forecast_outsample()
previsoes2

"""### Gráficos dos valores originais e das previsões"""

previsoes2['ARIMA'].plot(figsize=(20,3))
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['TBATP1'].plot(figsize=(20,3))		
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['HWAMS'].plot(figsize=(20,3))
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['HWAAS'].plot(figsize=(20,3))
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['TBAT'].plot(figsize=(20,3))		
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['TATS'].plot(figsize=(20,3))		
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['TBATS1'].plot(figsize=(20,3))		
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

previsoes2['TBATS2'].plot(figsize=(20,3))		
df[-50:]['MRTSSM4453USN'].plot()
plt.legend();

"""### Métricas de avaliação de cada modelo para fora da amostra

Criando uma função para calcular todas as métricas de avaliação.
"""

def metricas(modelo):
  print('Variância Explicada do modelo',modelo,': ',round(explained_variance_score(previsoes2[modelo],df[-50:]['MRTSSM4453USN'])*100,3))
  print('Erro Médio Absoluto do modelo',modelo,': ',round(mean_absolute_error(previsoes2[modelo],df[-50:]['MRTSSM4453USN'])*100,3))
  print('Erro Médio Quadrado do modelo',modelo,': ',round(mean_squared_error(previsoes2[modelo],df[-50:]['MRTSSM4453USN'])*100,3))
  print('Erro Logarítmico Quadrado Médio do modelo',modelo,': ',round(mean_squared_log_error(previsoes2[modelo],df[-50:]['MRTSSM4453USN'])*100,3))
  print('Erro Absoluto Mediano do modelo',modelo,': ',round(median_absolute_error(previsoes2[modelo],df[-50:]['MRTSSM4453USN'])*100,3))
  print('Coeficiente de Determinação (R²) do modelo',modelo,': ',round(r2_score(previsoes2[modelo],df[-50:]['MRTSSM4453USN'])*100,3),'%')

"""Abaixo temos os resultados dos modelos de melhor para o pior e observa-se que o modelo **TBATP1**"""

metricas('TBATP1')

metricas('ARIMA')

metricas('TBATS2')

metricas('HWAMS')

metricas('HWAAS')

metricas('TATS')

metricas('TBATS1')

metricas('TBAT')

"""### Dicionário dos modelos usados"""

am.models_dict_in

am.models_dict_out

"""## Retreino do modelo

Dado que o modelo TBATP1 foi o segundo melhor modelo na análise dentro da amostra e o melhor dentro da amostra, vamos usá-lo retreinado com todos os dados da série temporal e gerar previsões para um período de tempo desconhecido.
"""

#Para retreino do modelo
am2 = AutomatedModel(df=df, model_list=['TBATP1'], forecast_len=12)

"""Previsões dentro da amostra."""

previsoes3, desempenho2 = am2.forecast_insample()
previsoes3

"""Desempenho do novo modelo."""

desempenho2

"""Previsões fora da amostra."""

previsoes4 = am2.forecast_outsample()
previsoes4

"""Gráfico com a série original, a séries modelada e as previsões."""

previsoes3.plot(figsize=(20,6))
previsoes4['TBATP1'].plot()
plt.legend();

"""## Conclusão

Com poucas linhas de código foi possível gerar vários modelos e avaliar qual o melhor modelo para prever valores da nossa série temporal.
"""